/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import modelo.AnexosDAO;
import pojos.Anexos;
import raven.toast.Notifications;

/**
 *
 * @author soraf
 */
public class vntAnexo extends javax.swing.JPanel {

    /**
     * Creates new form vntAnexo
     */
    public vntAnexo() {
        initComponents();
        cargarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnInsertar = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("CONTROL DE ANEXOS");
        jLabel1.setToolTipText("");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "idAnexo", "tutorPracticas", "fechaInicio", "fechaFin", "dniAlumno", "contratacion", "anexo2.1", "anexo3", "anexo4", "anexo2.2", "anexo8"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        btnInsertar.setText("jButton1");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(619, 619, 619))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1079, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(217, 217, 217))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnInsertar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addComponent(btnInsertar)
                .addGap(41, 41, 41))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
// Obtener el JFrame principal
        JFrame framePrincipal = (JFrame) SwingUtilities.getWindowAncestor(this);

// Crear e inicializar el diálogo de inserción con el JFrame principal como padre
        DialogoInsertarAnexo dialogo = new DialogoInsertarAnexo(framePrincipal, true);
        dialogo.setVisible(true);

        // Obtener los datos ingresados por el usuario y los archivos seleccionados
        String tutorPracticas = dialogo.getTutorPracticas();
        String fechaInicio = dialogo.getFechaInicio();
        String fechaFin = dialogo.getFechaFin();
        String idNecesidad = dialogo.getIdNecesidad();
        String dniAlumno = dialogo.getDniAlumno();
        boolean contratacion = dialogo.getContratacion();
        byte[] bytesAnexoDosUno = dialogo.getBytesAnexoDosUno();
        byte[] bytesAnexoTres = dialogo.getBytesAnexoTres();
        byte[] bytesAnexoCuatro = dialogo.getBytesAnexoCuatro();
        byte[] bytesAnexoDosDos = dialogo.getBytesAnexoDosDos();
        byte[] bytesAnexoOcho = dialogo.getBytesAnexoOcho();

        // Insertar el nuevo anexo en la base de datos
        Anexos nuevoAnexo = new Anexos(tutorPracticas, fechaInicio, fechaFin, idNecesidad, dniAlumno, contratacion,
                bytesAnexoDosUno,
                bytesAnexoTres,
                bytesAnexoCuatro,
                bytesAnexoDosDos,
                bytesAnexoOcho);

        AnexosDAO anexosDAO = new AnexosDAO();
        boolean exito = anexosDAO.insertarAnexo(nuevoAnexo);

        // Mostrar mensaje de éxito o error
        if (exito) {
            JOptionPane.showMessageDialog(this, "Anexo insertado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Error al insertar el anexo", "Error", JOptionPane.ERROR_MESSAGE);
        }

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);

        // Recargar la tabla
        cargarTabla();


    }//GEN-LAST:event_btnInsertarActionPerformed

    private void cargarTabla() {
        AnexosDAO anexosDAO = new AnexosDAO();
        List<Anexos> listaAnexos = anexosDAO.obtenerAnexos();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        for (Anexos anexo : listaAnexos) {
            Object[] fila = {
                anexo.getIdAnexo(),
                anexo.getTutorPracticas(),
                anexo.getFechaInicio(),
                anexo.getFechaFin(),
                anexo.getDniAlumno(),
                anexo.getContratacion(),
                detectarMensaje(anexo.getAnexoDosUno()),
                detectarMensaje(anexo.getAnexoTres()),
                detectarMensaje(anexo.getAnexoCuatro()),
                detectarMensaje(anexo.getAnexoDosDos()),
                detectarMensaje(anexo.getAnexoOcho())
            };

            model.addRow(fila);
        }
    }

    private String detectarMensaje(byte[] data) {
        if (data != null && data.length > 0) {
            return "Subido";
        } else {
            return "No Subido";
        }
    }

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {
        // Obtener el índice de la fila y de la columna
        int fila = jTable1.rowAtPoint(evt.getPoint());
        int columna = jTable1.columnAtPoint(evt.getPoint());

        // Obtener el nombre de la columna
        String nombreColumna = jTable1.getColumnName(columna);

        // Mostrar el mensaje
        //JOptionPane.showMessageDialog(this, "Has pulsado la celda " + fila + " de la columna " + nombreColumna);
        
        
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(this);

        Notifications.getInstance().setJFrame(frame);
        Notifications.getInstance().show(Notifications.Type.INFO, Notifications.Location.TOP_CENTER, 2500, "Has pulsado la celda " + fila + " de la columna " + nombreColumna);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInsertar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
